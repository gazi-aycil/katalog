import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Divider,
  Alert,
  Grid,
  Tabs,
  Tab,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Card,
  CardContent,
} from '@mui/material';
import { Delete, Add, PlaylistAdd } from '@mui/icons-material';

const FEATURES_STORAGE_KEY = 'product_features';

// Ã–zellik tÃ¼rleri
const FEATURE_TYPES = {
  USAGE_AREA: 'usage_area',
  PRODUCT_MEASUREMENTS: 'product_measurements',
  PRODUCT_PROPERTIES: 'product_properties'
};

// Excel'den alÄ±nan Ã¶zellikler
const EXCEL_FEATURES = {
  USAGE_AREAS: {
    DIS_CEPH: [
      "DÄ±ÅŸ Cephe Kaplama",
      "Bina Temel AlÄ±n KÄ±smÄ± Kaplama",
      "Ã‡atÄ± SaÃ§ak AlÄ±n KÄ±smÄ±",
      "Ã‡atÄ± SaÃ§ak AltÄ±",
      "DÄ±ÅŸ Cephe Pencere Kenar SÃ¶ve",
      "Havuz KenarlarÄ± DÃ¶ÅŸeme",
      "Havuz Ä°Ã§i DÃ¶ÅŸeme",
      "Kamelya YapÄ±mÄ±",
      "BahÃ§e YÃ¼rÃ¼yÃ¼ÅŸ Yolu DÃ¶ÅŸeme",
      "Bina GiriÅŸ ÃœstÃ¼ Markizlerinizde",
      "Villa GiriÅŸ ÃœstÃ¼ Markizlerinizde",
      "BahÃ§e DuvarÄ± Kaplama & DÃ¶ÅŸeme"
    ],
    IC_CEPH: [
      "Mutfak Ä°Ã§i Duvar DÃ¶ÅŸeme",
      "Tezgah AlÄ±n KÄ±smÄ± DÃ¶ÅŸeme",
      "Lavabo & WC DuvarÄ±",
      "Banyo Ä°Ã§i Duvar DÃ¶ÅŸeme",
      "TV Ãœnite ArkasÄ±",
      "Yatak OdasÄ± Yatak BaÅŸÄ± DuvarÄ±",
      "MaÄŸaza Vitrin DÃ¶ÅŸeme",
      "Ev ve Ä°ÅŸyeri Taban DÃ¶ÅŸemeleri",
      "Ev ve Ä°ÅŸyeri Ä°Ã§ Mekan Taban DÃ¶ÅŸemeleri Dekor AmaÃ§lÄ±",
      "MaÄŸaza Ara BÃ¶lmelerde",
      "Bina GiriÅŸleri Taban DÃ¶ÅŸeme",
      "Bina GiriÅŸ HolÃ¼ Duvar DÃ¶ÅŸeme",
      "Villa GiriÅŸ HolÃ¼ Duvar Kaplama",
      "Salon Duvar DÃ¶ÅŸeme",
      "Ada Mutfak Yan DÃ¶ÅŸeme",
      "Ä°Ã§ Mekan Tavan DÃ¶ÅŸemelerinde"
    ]
  },
  MEASUREMENTS: [
    { name: "En - Boy", description: "ÃœrÃ¼n en ve boy Ã¶lÃ§Ã¼leri" },
    { name: "1 m2 Adet SayÄ±sÄ±", description: "1 metrekaredeki adet sayÄ±sÄ±" },
    { name: "1 m2 Kilogram", description: "1 metrekarenin kilogram cinsinden aÄŸÄ±rlÄ±ÄŸÄ±" },
    { name: "1 Palet Metrekare", description: "1 paletteki toplam metrekare" },
    { name: "1 Paket Adet SayÄ±sÄ±", description: "1 paketteki adet sayÄ±sÄ±" },
    { name: "1 Paket Metrekare", description: "1 paketteki toplam metrekare" }
  ],
  PROPERTIES: [
    "YÃ¼zeyi KaplamadÄ±r",
    "Solma Yapmaz",
    "Tekrar Boyanabilir",
    "GÃ¼neÅŸten Solar",
    "IsÄ±dan Etkilenmez",
    "Sudan Etkilenmez",
    "Sudan Etkilenir",
    "IsÄ± YalÄ±tÄ±m Ã–zelliÄŸi Yoktur",
    "IsÄ± YalÄ±tÄ±m Ã–zelliÄŸi vardÄ±r"
  ]
};

export default function Features() {
  const [features, setFeatures] = useState([]);
  const [newFeatureName, setNewFeatureName] = useState('');
  const [newFeatureDesc, setNewFeatureDesc] = useState('');
  const [featureType, setFeatureType] = useState(FEATURE_TYPES.USAGE_AREA);
  const [alert, setAlert] = useState({ open: false, message: '', severity: 'success' });
  const [activeTab, setActiveTab] = useState(0);

  // Ã–zellikleri localStorage'dan yÃ¼kle
  useEffect(() => {
    const loadFeatures = () => {
      try {
        const savedFeatures = localStorage.getItem(FEATURES_STORAGE_KEY);
        if (savedFeatures) {
          setFeatures(JSON.parse(savedFeatures));
        }
      } catch (error) {
        console.error('Ã–zellikler yÃ¼klenirken hata:', error);
      }
    };
    loadFeatures();
  }, []);

  // Ã–zellikleri localStorage'a kaydet
  useEffect(() => {
    localStorage.setItem(FEATURES_STORAGE_KEY, JSON.stringify(features));
  }, [features]);

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
    // Tab deÄŸiÅŸtiÄŸinde Ã¶zellik tÃ¼rÃ¼nÃ¼ de gÃ¼ncelle
    const types = [FEATURE_TYPES.USAGE_AREA, FEATURE_TYPES.PRODUCT_MEASUREMENTS, FEATURE_TYPES.PRODUCT_PROPERTIES];
    setFeatureType(types[newValue]);
  };

  const handleAddFeature = () => {
    if (!newFeatureName.trim()) {
      showAlert('Ã–zellik adÄ± boÅŸ olamaz', 'error');
      return;
    }

    if (features.some(f => f.name.toLowerCase() === newFeatureName.toLowerCase() && f.type === featureType)) {
      showAlert('Bu Ã¶zellik zaten mevcut', 'error');
      return;
    }

    const newFeature = {
      id: Date.now().toString(),
      name: newFeatureName.trim(),
      description: newFeatureDesc.trim(),
      type: featureType,
      hasValue: featureType === FEATURE_TYPES.PRODUCT_MEASUREMENTS,
      createdAt: new Date().toISOString()
    };

    setFeatures(prev => [...prev, newFeature]);
    setNewFeatureName('');
    setNewFeatureDesc('');
    showAlert('Ã–zellik baÅŸarÄ±yla eklendi', 'success');
  };

  // Excel'den Ã¶zellikleri toplu ekle
  const handleAddExcelFeatures = (category) => {
    let featuresToAdd = [];
    
    switch (category) {
      case 'dis_ceph':
        featuresToAdd = EXCEL_FEATURES.USAGE_AREAS.DIS_CEPH.map(name => ({
          id: `dis_ceph_${Date.now()}_${Math.random()}`,
          name,
          description: 'DÄ±ÅŸ Cephe KullanÄ±m AlanÄ±',
          type: FEATURE_TYPES.USAGE_AREA,
          hasValue: false,
          createdAt: new Date().toISOString()
        }));
        break;
        
      case 'ic_ceph':
        featuresToAdd = EXCEL_FEATURES.USAGE_AREAS.IC_CEPH.map(name => ({
          id: `ic_ceph_${Date.now()}_${Math.random()}`,
          name,
          description: 'Ä°Ã§ Cephe KullanÄ±m AlanÄ±',
          type: FEATURE_TYPES.USAGE_AREA,
          hasValue: false,
          createdAt: new Date().toISOString()
        }));
        break;
        
      case 'measurements':
        featuresToAdd = EXCEL_FEATURES.MEASUREMENTS.map(item => ({
          id: `measure_${Date.now()}_${Math.random()}`,
          name: item.name,
          description: item.description,
          type: FEATURE_TYPES.PRODUCT_MEASUREMENTS,
          hasValue: true,
          createdAt: new Date().toISOString()
        }));
        break;
        
      case 'properties':
        featuresToAdd = EXCEL_FEATURES.PROPERTIES.map(name => ({
          id: `prop_${Date.now()}_${Math.random()}`,
          name,
          description: 'ÃœrÃ¼n Ã–zelliÄŸi',
          type: FEATURE_TYPES.PRODUCT_PROPERTIES,
          hasValue: false,
          createdAt: new Date().toISOString()
        }));
        break;
        
      default:
        return;
    }
    
    // Sadece mevcut olmayan Ã¶zellikleri ekle
    const existingNames = features.map(f => f.name.toLowerCase());
    const newFeatures = featuresToAdd.filter(f => !existingNames.includes(f.name.toLowerCase()));
    
    if (newFeatures.length === 0) {
      showAlert('TÃ¼m Ã¶zellikler zaten mevcut', 'info');
      return;
    }
    
    setFeatures(prev => [...prev, ...newFeatures]);
    showAlert(`${newFeatures.length} yeni Ã¶zellik eklendi`, 'success');
  };

  const handleDeleteFeature = (id) => {
    setFeatures(prev => prev.filter(f => f.id !== id));
    showAlert('Ã–zellik silindi', 'info');
  };

  const handleDeleteAllFeatures = (type) => {
    setFeatures(prev => prev.filter(f => f.type !== type));
    showAlert('TÃ¼m Ã¶zellikler silindi', 'info');
  };

  const showAlert = (message, severity) => {
    setAlert({ open: true, message, severity });
    setTimeout(() => setAlert(prev => ({ ...prev, open: false })), 3000);
  };

  // KullanÄ±m alanlarÄ±nÄ± filtrele
  const usageAreaFeatures = features.filter(f => f.type === FEATURE_TYPES.USAGE_AREA);
  const measurementFeatures = features.filter(f => f.type === FEATURE_TYPES.PRODUCT_MEASUREMENTS);
  const propertyFeatures = features.filter(f => f.type === FEATURE_TYPES.PRODUCT_PROPERTIES);

  return (
    <Box sx={{ p: 3, maxWidth: 1200, margin: '0 auto' }}>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', mb: 4 }}>
        Ã–zellik AyarlarÄ±
      </Typography>

      {alert.open && (
        <Alert severity={alert.severity} sx={{ mb: 3 }}>
          {alert.message}
        </Alert>
      )}

      {/* Excel Ã–zellikleri Toplu Ekleme */}
      <Paper elevation={2} sx={{ p: 3, mb: 3, borderRadius: 2, bgcolor: 'primary.50' }}>
        <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 3, color: 'primary.main' }}>
          ðŸ“Š Excel'den Toplu Ã–zellik Ekleme
        </Typography>
        
        <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                  KullanÄ±m AlanlarÄ± - DÄ±ÅŸ Cephe
                </Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  {EXCEL_FEATURES.USAGE_AREAS.DIS_CEPH.length} Ã¶zellik
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<PlaylistAdd />}
                  onClick={() => handleAddExcelFeatures('dis_ceph')}
                  fullWidth
                  size="small"
                >
                  DÄ±ÅŸ Cephe Ã–zelliklerini Ekle
                </Button>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                  KullanÄ±m AlanlarÄ± - Ä°Ã§ Cephe
                </Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  {EXCEL_FEATURES.USAGE_AREAS.IC_CEPH.length} Ã¶zellik
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<PlaylistAdd />}
                  onClick={() => handleAddExcelFeatures('ic_ceph')}
                  fullWidth
                  size="small"
                >
                  Ä°Ã§ Cephe Ã–zelliklerini Ekle
                </Button>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                  ÃœrÃ¼n Ã–lÃ§Ã¼leri
                </Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  {EXCEL_FEATURES.MEASUREMENTS.length} Ã¶zellik
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<PlaylistAdd />}
                  onClick={() => handleAddExcelFeatures('measurements')}
                  fullWidth
                  size="small"
                >
                  Ã–lÃ§Ã¼ Ã–zelliklerini Ekle
                </Button>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                  ÃœrÃ¼n Ã–zellikleri
                </Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  {EXCEL_FEATURES.PROPERTIES.length} Ã¶zellik
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<PlaylistAdd />}
                  onClick={() => handleAddExcelFeatures('properties')}
                  fullWidth
                  size="small"
                >
                  Genel Ã–zellikleri Ekle
                </Button>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Paper>

      {/* Yeni Ã–zellik Ekleme Formu */}
      <Paper elevation={2} sx={{ p: 3, mb: 3, borderRadius: 2 }}>
        <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>
          Manuel Ã–zellik Ekle
        </Typography>
        
        <Grid container spacing={2} alignItems="flex-end">
          <Grid item xs={12} md={3}>
            <FormControl fullWidth>
              <InputLabel>Ã–zellik TÃ¼rÃ¼</InputLabel>
              <Select
                value={featureType}
                label="Ã–zellik TÃ¼rÃ¼"
                onChange={(e) => setFeatureType(e.target.value)}
                size="medium"
              >
                <MenuItem value={FEATURE_TYPES.USAGE_AREA}>KullanÄ±m AlanlarÄ±</MenuItem>
                <MenuItem value={FEATURE_TYPES.PRODUCT_MEASUREMENTS}>ÃœrÃ¼n Ã–lÃ§Ã¼leri</MenuItem>
                <MenuItem value={FEATURE_TYPES.PRODUCT_PROPERTIES}>ÃœrÃ¼n Ã–zellikleri</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              label="Ã–zellik AdÄ±"
              value={newFeatureName}
              onChange={(e) => setNewFeatureName(e.target.value)}
              placeholder={
                featureType === FEATURE_TYPES.USAGE_AREA 
                  ? "Ã–rn: Mutfak, Banyo, Ofis..." 
                  : featureType === FEATURE_TYPES.PRODUCT_MEASUREMENTS
                  ? "Ã–rn: GeniÅŸlik, YÃ¼kseklik, AÄŸÄ±rlÄ±k..."
                  : "Ã–rn: Su GeÃ§irmez, AteÅŸe DayanÄ±klÄ±..."
              }
              size="medium"
            />
          </Grid>
          <Grid item xs={12} md={3}>
            <TextField
              fullWidth
              label="AÃ§Ä±klama (Opsiyonel)"
              value={newFeatureDesc}
              onChange={(e) => setNewFeatureDesc(e.target.value)}
              placeholder="Ã–zellik aÃ§Ä±klamasÄ±..."
              size="medium"
            />
          </Grid>
          <Grid item xs={12} md={2}>
            <Button
              variant="contained"
              startIcon={<Add />}
              onClick={handleAddFeature}
              fullWidth
              size="large"
              disabled={!newFeatureName.trim()}
            >
              Ekle
            </Button>
          </Grid>
        </Grid>
        
        {featureType === FEATURE_TYPES.PRODUCT_MEASUREMENTS && (
          <Typography variant="caption" color="info.main" sx={{ mt: 1, display: 'block' }}>
            ðŸ’¡ Bu Ã¶zellik Ã¼rÃ¼n ekleme/gÃ¼ncelleme formunda deÄŸer (value) alanÄ± ile birlikte gÃ¶rÃ¼necektir.
          </Typography>
        )}
      </Paper>

      {/* Tab Panel */}
      <Paper elevation={2} sx={{ borderRadius: 2 }}>
        <Tabs 
          value={activeTab} 
          onChange={handleTabChange}
          sx={{ 
            borderBottom: 1, 
            borderColor: 'divider',
            '& .MuiTab-root': { fontWeight: 'bold' }
          }}
        >
          <Tab label={`KullanÄ±m AlanlarÄ± (${usageAreaFeatures.length})`} />
          <Tab label={`ÃœrÃ¼n Ã–lÃ§Ã¼leri (${measurementFeatures.length})`} />
          <Tab label={`ÃœrÃ¼n Ã–zellikleri (${propertyFeatures.length})`} />
        </Tabs>

        {/* KullanÄ±m AlanlarÄ± Tab'Ä± */}
        {activeTab === 0 && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">KullanÄ±m AlanlarÄ±</Typography>
              <Button 
                variant="outlined" 
                color="error" 
                size="small"
                onClick={() => handleDeleteAllFeatures(FEATURE_TYPES.USAGE_AREA)}
                disabled={usageAreaFeatures.length === 0}
              >
                TÃ¼mÃ¼nÃ¼ Sil
              </Button>
            </Box>
            
            {usageAreaFeatures.length === 0 ? (
              <Box sx={{ p: 4, textAlign: 'center' }}>
                <Typography variant="body1" color="textSecondary">
                  HenÃ¼z kullanÄ±m alanÄ± eklenmemiÅŸ
                </Typography>
              </Box>
            ) : (
              <List>
                {usageAreaFeatures.map((feature, index) => (
                  <React.Fragment key={feature.id}>
                    <ListItem>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Typography variant="body1" fontWeight="medium">
                              {feature.name}
                            </Typography>
                            <Typography 
                              variant="caption" 
                              sx={{ 
                                bgcolor: 'primary.light', 
                                color: 'white', 
                                px: 1, 
                                borderRadius: 1,
                                fontSize: '0.7rem'
                              }}
                            >
                              KullanÄ±m AlanÄ±
                            </Typography>
                          </Box>
                        }
                        secondary={
                          feature.description ? (
                            <Typography variant="body2" color="textSecondary">
                              {feature.description}
                            </Typography>
                          ) : null
                        }
                      />
                      <ListItemSecondaryAction>
                        <IconButton
                          edge="end"
                          aria-label="delete"
                          onClick={() => handleDeleteFeature(feature.id)}
                          color="error"
                        >
                          <Delete />
                        </IconButton>
                      </ListItemSecondaryAction>
                    </ListItem>
                    {index < usageAreaFeatures.length - 1 && <Divider variant="inset" component="li" />}
                  </React.Fragment>
                ))}
              </List>
            )}
          </Box>
        )}

        {/* ÃœrÃ¼n Ã–lÃ§Ã¼leri Tab'Ä± */}
        {activeTab === 1 && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">ÃœrÃ¼n Ã–lÃ§Ã¼leri</Typography>
              <Button 
                variant="outlined" 
                color="error" 
                size="small"
                onClick={() => handleDeleteAllFeatures(FEATURE_TYPES.PRODUCT_MEASUREMENTS)}
                disabled={measurementFeatures.length === 0}
              >
                TÃ¼mÃ¼nÃ¼ Sil
              </Button>
            </Box>
            
            {measurementFeatures.length === 0 ? (
              <Box sx={{ p: 4, textAlign: 'center' }}>
                <Typography variant="body1" color="textSecondary">
                  HenÃ¼z Ã¼rÃ¼n Ã¶lÃ§Ã¼sÃ¼ eklenmemiÅŸ
                </Typography>
              </Box>
            ) : (
              <List>
                {measurementFeatures.map((feature, index) => (
                  <React.Fragment key={feature.id}>
                    <ListItem>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Typography variant="body1" fontWeight="medium">
                              {feature.name}
                            </Typography>
                            <Typography 
                              variant="caption" 
                              sx={{ 
                                bgcolor: 'secondary.light', 
                                color: 'white', 
                                px: 1, 
                                borderRadius: 1,
                                fontSize: '0.7rem'
                              }}
                            >
                              Ã–lÃ§Ã¼ Birimi
                            </Typography>
                            {feature.hasValue && (
                              <Typography 
                                variant="caption" 
                                sx={{ 
                                  bgcolor: 'success.light', 
                                  color: 'white', 
                                  px: 1, 
                                  borderRadius: 1,
                                  fontSize: '0.7rem'
                                }}
                              >
                                DeÄŸer AlanÄ±
                              </Typography>
                            )}
                          </Box>
                        }
                        secondary={
                          feature.description ? (
                            <Typography variant="body2" color="textSecondary">
                              {feature.description}
                            </Typography>
                          ) : (
                            <Typography variant="caption" color="textSecondary">
                              Bu Ã¶zellik Ã¼rÃ¼n formunda deÄŸer giriÅŸi gerektirir.
                            </Typography>
                          )
                        }
                      />
                      <ListItemSecondaryAction>
                        <IconButton
                          edge="end"
                          aria-label="delete"
                          onClick={() => handleDeleteFeature(feature.id)}
                          color="error"
                        >
                          <Delete />
                        </IconButton>
                      </ListItemSecondaryAction>
                    </ListItem>
                    {index < measurementFeatures.length - 1 && <Divider variant="inset" component="li" />}
                  </React.Fragment>
                ))}
              </List>
            )}
          </Box>
        )}

        {/* ÃœrÃ¼n Ã–zellikleri Tab'Ä± */}
        {activeTab === 2 && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">ÃœrÃ¼n Ã–zellikleri</Typography>
              <Button 
                variant="outlined" 
                color="error" 
                size="small"
                onClick={() => handleDeleteAllFeatures(FEATURE_TYPES.PRODUCT_PROPERTIES)}
                disabled={propertyFeatures.length === 0}
              >
                TÃ¼mÃ¼nÃ¼ Sil
              </Button>
            </Box>
            
            {propertyFeatures.length === 0 ? (
              <Box sx={{ p: 4, textAlign: 'center' }}>
                <Typography variant="body1" color="textSecondary">
                  HenÃ¼z Ã¼rÃ¼n Ã¶zelliÄŸi eklenmemiÅŸ
                </Typography>
              </Box>
            ) : (
              <List>
                {propertyFeatures.map((feature, index) => (
                  <React.Fragment key={feature.id}>
                    <ListItem>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Typography variant="body1" fontWeight="medium">
                              {feature.name}
                            </Typography>
                            <Typography 
                              variant="caption" 
                              sx={{ 
                                bgcolor: 'warning.light', 
                                color: 'white', 
                                px: 1, 
                                borderRadius: 1,
                                fontSize: '0.7rem'
                              }}
                            >
                              ÃœrÃ¼n Ã–zelliÄŸi
                            </Typography>
                          </Box>
                        }
                        secondary={
                          feature.description ? (
                            <Typography variant="body2" color="textSecondary">
                              {feature.description}
                            </Typography>
                          ) : null
                        }
                      />
                      <ListItemSecondaryAction>
                        <IconButton
                          edge="end"
                          aria-label="delete"
                          onClick={() => handleDeleteFeature(feature.id)}
                          color="error"
                        >
                          <Delete />
                        </IconButton>
                      </ListItemSecondaryAction>
                    </ListItem>
                    {index < propertyFeatures.length - 1 && <Divider variant="inset" component="li" />}
                  </React.Fragment>
                ))}
              </List>
            )}
          </Box>
        )}
      </Paper>

      {/* Bilgi Notu */}
      <Alert severity="info" sx={{ mt: 3 }}>
        <Typography variant="body2">
          <strong>Bilgi:</strong> 
          <br />â€¢ <strong>KullanÄ±m AlanlarÄ±:</strong> Checkbox ile seÃ§ilir (Ã¶rn: Mutfak, Banyo)
          <br />â€¢ <strong>ÃœrÃ¼n Ã–lÃ§Ã¼leri:</strong> DeÄŸer giriÅŸi ile kullanÄ±lÄ±r (Ã¶rn: GeniÅŸlik: 120cm)
          <br />â€¢ <strong>ÃœrÃ¼n Ã–zellikleri:</strong> Checkbox ile seÃ§ilir (Ã¶rn: Su GeÃ§irmez, AteÅŸe DayanÄ±klÄ±)
        </Typography>
      </Alert>
    </Box>
  );
}