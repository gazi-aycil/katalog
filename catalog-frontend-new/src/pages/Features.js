import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Divider,
  Alert,
  Grid,
  Tabs,
  Tab,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from '@mui/material';
import { Delete, Add } from '@mui/icons-material';

const FEATURES_STORAGE_KEY = 'product_features';

// Ã–zellik tÃ¼rleri
const FEATURE_TYPES = {
  USAGE_AREA: 'usage_area',
  PRODUCT_MEASUREMENTS: 'product_measurements'
};

export default function Features() {
  const [features, setFeatures] = useState([]);
  const [newFeatureName, setNewFeatureName] = useState('');
  const [newFeatureDesc, setNewFeatureDesc] = useState('');
  const [featureType, setFeatureType] = useState(FEATURE_TYPES.USAGE_AREA);
  const [alert, setAlert] = useState({ open: false, message: '', severity: 'success' });
  const [activeTab, setActiveTab] = useState(0);

  // Ã–zellikleri localStorage'dan yÃ¼kle
  useEffect(() => {
    const loadFeatures = () => {
      try {
        const savedFeatures = localStorage.getItem(FEATURES_STORAGE_KEY);
        if (savedFeatures) {
          setFeatures(JSON.parse(savedFeatures));
        }
      } catch (error) {
        console.error('Ã–zellikler yÃ¼klenirken hata:', error);
      }
    };
    loadFeatures();
  }, []);

  // Ã–zellikleri localStorage'a kaydet
  useEffect(() => {
    localStorage.setItem(FEATURES_STORAGE_KEY, JSON.stringify(features));
  }, [features]);

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
    // Tab deÄŸiÅŸtiÄŸinde Ã¶zellik tÃ¼rÃ¼nÃ¼ de gÃ¼ncelle
    setFeatureType(newValue === 0 ? FEATURE_TYPES.USAGE_AREA : FEATURE_TYPES.PRODUCT_MEASUREMENTS);
  };

  const handleAddFeature = () => {
    if (!newFeatureName.trim()) {
      showAlert('Ã–zellik adÄ± boÅŸ olamaz', 'error');
      return;
    }

    if (features.some(f => f.name.toLowerCase() === newFeatureName.toLowerCase() && f.type === featureType)) {
      showAlert('Bu Ã¶zellik zaten mevcut', 'error');
      return;
    }

    const newFeature = {
      id: Date.now().toString(),
      name: newFeatureName.trim(),
      description: newFeatureDesc.trim(),
      type: featureType,
      hasValue: featureType === FEATURE_TYPES.PRODUCT_MEASUREMENTS, // Ã–lÃ§Ã¼ler iÃ§in value alanÄ±
      createdAt: new Date().toISOString()
    };

    setFeatures(prev => [...prev, newFeature]);
    setNewFeatureName('');
    setNewFeatureDesc('');
    showAlert('Ã–zellik baÅŸarÄ±yla eklendi', 'success');
  };

  const handleDeleteFeature = (id) => {
    setFeatures(prev => prev.filter(f => f.id !== id));
    showAlert('Ã–zellik silindi', 'info');
  };

  const showAlert = (message, severity) => {
    setAlert({ open: true, message, severity });
    setTimeout(() => setAlert(prev => ({ ...prev, open: false })), 3000);
  };

  // KullanÄ±m alanlarÄ±nÄ± filtrele
  const usageAreaFeatures = features.filter(f => f.type === FEATURE_TYPES.USAGE_AREA);
  const measurementFeatures = features.filter(f => f.type === FEATURE_TYPES.PRODUCT_MEASUREMENTS);

  return (
    <Box sx={{ p: 3, maxWidth: 1000, margin: '0 auto' }}>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', mb: 4 }}>
        Ã–zellik AyarlarÄ±
      </Typography>

      {alert.open && (
        <Alert severity={alert.severity} sx={{ mb: 3 }}>
          {alert.message}
        </Alert>
      )}

      {/* Yeni Ã–zellik Ekleme Formu */}
      <Paper elevation={2} sx={{ p: 3, mb: 3, borderRadius: 2 }}>
        <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>
          Yeni Ã–zellik Ekle
        </Typography>
        
        <Grid container spacing={2} alignItems="flex-end">
          <Grid item xs={12} md={3}>
            <FormControl fullWidth>
              <InputLabel>Ã–zellik TÃ¼rÃ¼</InputLabel>
              <Select
                value={featureType}
                label="Ã–zellik TÃ¼rÃ¼"
                onChange={(e) => setFeatureType(e.target.value)}
                size="medium"
              >
                <MenuItem value={FEATURE_TYPES.USAGE_AREA}>KullanÄ±m AlanlarÄ±</MenuItem>
                <MenuItem value={FEATURE_TYPES.PRODUCT_MEASUREMENTS}>ÃœrÃ¼n Ã–lÃ§Ã¼leri</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              label="Ã–zellik AdÄ±"
              value={newFeatureName}
              onChange={(e) => setNewFeatureName(e.target.value)}
              placeholder={
                featureType === FEATURE_TYPES.USAGE_AREA 
                  ? "Ã–rn: Mutfak, Banyo, Ofis..." 
                  : "Ã–rn: GeniÅŸlik, YÃ¼kseklik, AÄŸÄ±rlÄ±k..."
              }
              size="medium"
            />
          </Grid>
          <Grid item xs={12} md={3}>
            <TextField
              fullWidth
              label="AÃ§Ä±klama (Opsiyonel)"
              value={newFeatureDesc}
              onChange={(e) => setNewFeatureDesc(e.target.value)}
              placeholder="Ã–zellik aÃ§Ä±klamasÄ±..."
              size="medium"
            />
          </Grid>
          <Grid item xs={12} md={2}>
            <Button
              variant="contained"
              startIcon={<Add />}
              onClick={handleAddFeature}
              fullWidth
              size="large"
              disabled={!newFeatureName.trim()}
            >
              Ekle
            </Button>
          </Grid>
        </Grid>
        
        {featureType === FEATURE_TYPES.PRODUCT_MEASUREMENTS && (
          <Typography variant="caption" color="info.main" sx={{ mt: 1, display: 'block' }}>
            ðŸ’¡ Bu Ã¶zellik Ã¼rÃ¼n ekleme/gÃ¼ncelleme formunda deÄŸer (value) alanÄ± ile birlikte gÃ¶rÃ¼necektir.
          </Typography>
        )}
      </Paper>

      {/* Tab Panel */}
      <Paper elevation={2} sx={{ borderRadius: 2 }}>
        <Tabs 
          value={activeTab} 
          onChange={handleTabChange}
          sx={{ 
            borderBottom: 1, 
            borderColor: 'divider',
            '& .MuiTab-root': { fontWeight: 'bold' }
          }}
        >
          <Tab 
            label={`KullanÄ±m AlanlarÄ± (${usageAreaFeatures.length})`} 
          />
          <Tab 
            label={`ÃœrÃ¼n Ã–lÃ§Ã¼leri (${measurementFeatures.length})`} 
          />
        </Tabs>

        {/* KullanÄ±m AlanlarÄ± Tab'Ä± */}
        {activeTab === 0 && (
          <Box sx={{ p: 3 }}>
            {usageAreaFeatures.length === 0 ? (
              <Box sx={{ p: 4, textAlign: 'center' }}>
                <Typography variant="body1" color="textSecondary">
                  HenÃ¼z kullanÄ±m alanÄ± eklenmemiÅŸ
                </Typography>
                <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                  Ã–rneÄŸin: "Mutfak", "Banyo", "Ofis", "BahÃ§e" gibi kullanÄ±m alanlarÄ± ekleyin.
                </Typography>
              </Box>
            ) : (
              <List>
                {usageAreaFeatures.map((feature, index) => (
                  <React.Fragment key={feature.id}>
                    <ListItem>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Typography variant="body1" fontWeight="medium">
                              {feature.name}
                            </Typography>
                            <Typography 
                              variant="caption" 
                              sx={{ 
                                bgcolor: 'primary.light', 
                                color: 'white', 
                                px: 1, 
                                borderRadius: 1,
                                fontSize: '0.7rem'
                              }}
                            >
                              KullanÄ±m AlanÄ±
                            </Typography>
                          </Box>
                        }
                        secondary={
                          feature.description ? (
                            <Typography variant="body2" color="textSecondary">
                              {feature.description}
                            </Typography>
                          ) : null
                        }
                      />
                      <ListItemSecondaryAction>
                        <IconButton
                          edge="end"
                          aria-label="delete"
                          onClick={() => handleDeleteFeature(feature.id)}
                          color="error"
                        >
                          <Delete />
                        </IconButton>
                      </ListItemSecondaryAction>
                    </ListItem>
                    {index < usageAreaFeatures.length - 1 && <Divider variant="inset" component="li" />}
                  </React.Fragment>
                ))}
              </List>
            )}
          </Box>
        )}

        {/* ÃœrÃ¼n Ã–lÃ§Ã¼leri Tab'Ä± */}
        {activeTab === 1 && (
          <Box sx={{ p: 3 }}>
            {measurementFeatures.length === 0 ? (
              <Box sx={{ p: 4, textAlign: 'center' }}>
                <Typography variant="body1" color="textSecondary">
                  HenÃ¼z Ã¼rÃ¼n Ã¶lÃ§Ã¼sÃ¼ eklenmemiÅŸ
                </Typography>
                <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                  Ã–rneÄŸin: "GeniÅŸlik", "YÃ¼kseklik", "Derinlik", "AÄŸÄ±rlÄ±k" gibi Ã¶lÃ§Ã¼ birimleri ekleyin.
                </Typography>
              </Box>
            ) : (
              <List>
                {measurementFeatures.map((feature, index) => (
                  <React.Fragment key={feature.id}>
                    <ListItem>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Typography variant="body1" fontWeight="medium">
                              {feature.name}
                            </Typography>
                            <Typography 
                              variant="caption" 
                              sx={{ 
                                bgcolor: 'secondary.light', 
                                color: 'white', 
                                px: 1, 
                                borderRadius: 1,
                                fontSize: '0.7rem'
                              }}
                            >
                              Ã–lÃ§Ã¼ Birimi
                            </Typography>
                            {feature.hasValue && (
                              <Typography 
                                variant="caption" 
                                sx={{ 
                                  bgcolor: 'success.light', 
                                  color: 'white', 
                                  px: 1, 
                                  borderRadius: 1,
                                  fontSize: '0.7rem'
                                }}
                              >
                                DeÄŸer AlanÄ±
                              </Typography>
                            )}
                          </Box>
                        }
                        secondary={
                          feature.description ? (
                            <Typography variant="body2" color="textSecondary">
                              {feature.description}
                            </Typography>
                          ) : (
                            <Typography variant="caption" color="textSecondary">
                              Bu Ã¶zellik Ã¼rÃ¼n formunda deÄŸer giriÅŸi gerektirir.
                            </Typography>
                          )
                        }
                      />
                      <ListItemSecondaryAction>
                        <IconButton
                          edge="end"
                          aria-label="delete"
                          onClick={() => handleDeleteFeature(feature.id)}
                          color="error"
                        >
                          <Delete />
                        </IconButton>
                      </ListItemSecondaryAction>
                    </ListItem>
                    {index < measurementFeatures.length - 1 && <Divider variant="inset" component="li" />}
                  </React.Fragment>
                ))}
              </List>
            )}
          </Box>
        )}
      </Paper>

      {/* Bilgi Notu */}
      <Alert severity="info" sx={{ mt: 3 }}>
        <Typography variant="body2">
          <strong>Bilgi:</strong> 
          <br />â€¢ <strong>KullanÄ±m AlanlarÄ±:</strong> Checkbox ile seÃ§ilir (Ã¶rn: Mutfak, Banyo)
          <br />â€¢ <strong>ÃœrÃ¼n Ã–lÃ§Ã¼leri:</strong> DeÄŸer giriÅŸi ile kullanÄ±lÄ±r (Ã¶rn: GeniÅŸlik: 120cm, AÄŸÄ±rlÄ±k: 15kg)
        </Typography>
      </Alert>
    </Box>
  );
}